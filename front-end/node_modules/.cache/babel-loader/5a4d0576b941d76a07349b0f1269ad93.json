{"ast":null,"code":"import axios from \"axios\";\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  // createBasicAuthToken(username,password){\n  //     return 'Basic '+window.btoa(username +\":\"+password)\n  // }\n\n  // registerSuccessfullLogin(username,password){\n  //     //data stored in localStorage has no expiration time \n  //     //data stored in sessionStorage gets cleared when the page seesion ends\n  //     // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\n\n  //     sessionStorage.setItem('authenticatedUser',username);\n  //     this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\n  // }\n\n  registerSuccessfullLoginForJwt(username, token) {\n    // console.log('start registerSuccessfullLoginForJwt')\n    sessionStorage.setItem('authenticatedUser', username);\n    // console.log(' sessionStorage')\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n    // console.log('registerSuccessfullLoginForJwt')\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) {\n      return '';\n    } else {\n      return user;\n    }\n  }\n  setupAxiosInterceptors(token) {\n    // let username = 'user'\n    // let password = 'password'\n\n    // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\n    console.log('start setupAxiosInterceptors');\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n        console.log(token);\n      }\n      return config;\n    });\n  }\n}\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","registerSuccessfullLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","console","log","interceptors","request","use","config"],"sources":["C:/Users/d1029/Documents/full_stack/todo-app/first_front_back_end_application/front-end/src/components/todo/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\r\nclass AuthenticationService{\r\n    \r\n    executeBasicAuthenticationService(username,password){\r\n        \r\n        return axios.get('http://localhost:8080/basicauth',\r\n            {headers: {authorization:this.createBasicAuthToken(username,password) }})\r\n    }\r\n\r\n    executeJwtAuthenticationService(username,password){\r\n        \r\n        return axios.post('http://localhost:8080/authenticate',\r\n            {username,\r\n             password}\r\n            )\r\n    }\r\n\r\n    \r\n    // createBasicAuthToken(username,password){\r\n    //     return 'Basic '+window.btoa(username +\":\"+password)\r\n    // }\r\n\r\n    // registerSuccessfullLogin(username,password){\r\n    //     //data stored in localStorage has no expiration time \r\n    //     //data stored in sessionStorage gets cleared when the page seesion ends\r\n    //     // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\r\n\r\n    //     sessionStorage.setItem('authenticatedUser',username);\r\n    //     this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\r\n    // }\r\n    \r\n    registerSuccessfullLoginForJwt(username,token){\r\n        // console.log('start registerSuccessfullLoginForJwt')\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n        // console.log(' sessionStorage')\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n        // console.log('registerSuccessfullLoginForJwt')\r\n    }\r\n\r\n    createJWTToken(token){\r\n        return 'Bearer ' + token\r\n    }\r\n    \r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser')\r\n    }\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null){return false}\r\n        else{return true}\r\n    }\r\n    getLoggedInUserName(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null){return ''}\r\n        else{return user}\r\n    }\r\n    setupAxiosInterceptors(token){\r\n\r\n        // let username = 'user'\r\n        // let password = 'password'\r\n\r\n        // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\r\n        console.log('start setupAxiosInterceptors')\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLoggedIn()){\r\n                config.headers.authorization = token\r\n                \r\n                console.log(token)\r\n            }\r\n            return config\r\n        }\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default new AuthenticationService()"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,qBAAqB;EAEvBC,iCAAiC,CAACC,QAAQ,EAACC,QAAQ,EAAC;IAEhD,OAAOJ,KAAK,CAACK,GAAG,CAAC,iCAAiC,EAC9C;MAACC,OAAO,EAAE;QAACC,aAAa,EAAC,IAAI,CAACC,oBAAoB,CAACL,QAAQ,EAACC,QAAQ;MAAE;IAAC,CAAC,CAAC;EACjF;EAEAK,+BAA+B,CAACN,QAAQ,EAACC,QAAQ,EAAC;IAE9C,OAAOJ,KAAK,CAACU,IAAI,CAAC,oCAAoC,EAClD;MAACP,QAAQ;MACRC;IAAQ,CAAC,CACT;EACT;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEAO,8BAA8B,CAACR,QAAQ,EAACS,KAAK,EAAC;IAC1C;IACAC,cAAc,CAACC,OAAO,CAAC,mBAAmB,EAACX,QAAQ,CAAC;IACpD;IACA,IAAI,CAACY,sBAAsB,CAAC,IAAI,CAACC,cAAc,CAACJ,KAAK,CAAC,CAAC;IACvD;EACJ;;EAEAI,cAAc,CAACJ,KAAK,EAAC;IACjB,OAAO,SAAS,GAAGA,KAAK;EAC5B;EAEAK,MAAM,GAAE;IACJJ,cAAc,CAACK,UAAU,CAAC,mBAAmB,CAAC;EAClD;EACAC,cAAc,GAAE;IACZ,IAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAG,IAAI,EAAC;MAAC,OAAO,KAAK;IAAA,CAAC,MACzB;MAAC,OAAO,IAAI;IAAA;EACpB;EACAE,mBAAmB,GAAE;IACjB,IAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAG,IAAI,EAAC;MAAC,OAAO,EAAE;IAAA,CAAC,MACtB;MAAC,OAAOA,IAAI;IAAA;EACpB;EACAL,sBAAsB,CAACH,KAAK,EAAC;IAEzB;IACA;;IAEA;IACAW,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CxB,KAAK,CAACyB,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;MACR,IAAG,IAAI,CAACT,cAAc,EAAE,EAAC;QACzBS,MAAM,CAACtB,OAAO,CAACC,aAAa,GAAGK,KAAK;QAEpCW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;MACtB;MACA,OAAOgB,MAAM;IACjB,CAAC,CACA;EACL;AAGJ;AACA,eAAe,IAAI3B,qBAAqB,EAAE"},"metadata":{},"sourceType":"module"}