{"ast":null,"code":"import axios from \"axios\";\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n  registerSuccessfullLogin(username, password) {\n    //data stored in localStorage has no expiration time \n    //data stored in sessionStorage gets cleared when the page seesion ends\n    // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\n\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) {\n      return '';\n    } else {\n      return user;\n    }\n  }\n  setupAxiosInterceptors(basicAuthHeader) {\n    // let username = 'user'\n    // let password = 'password'\n\n    // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\n\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n      return config;\n    });\n  }\n}\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","registerSuccessfullLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","interceptors","request","use","config"],"sources":["C:/Users/d1029/Documents/full_stack/todo-app/first_front_back_end_application/front-end/src/components/todo/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\r\nclass AuthenticationService{\r\n    \r\n    executeBasicAuthenticationService(username,password){\r\n        \r\n        return axios.get('http://localhost:8080/basicauth',\r\n            {headers: {authorization:this.createBasicAuthToken(username,password) }})\r\n    }\r\n\r\n    executeJwtAuthenticationService(username,password){\r\n        \r\n        return axios.post('http://localhost:8080/authenticate',\r\n            {username,password}\r\n            )\r\n    }\r\n\r\n    \r\n    createBasicAuthToken(username,password){\r\n        return 'Basic '+window.btoa(username +\":\"+password)\r\n    }\r\n\r\n    registerSuccessfullLogin(username,password){\r\n        //data stored in localStorage has no expiration time \r\n        //data stored in sessionStorage gets cleared when the page seesion ends\r\n        // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\r\n\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\r\n    }\r\n    \r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser')\r\n    }\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null){return false}\r\n        else{return true}\r\n    }\r\n    getLoggedInUserName(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null){return ''}\r\n        else{return user}\r\n    }\r\n    setupAxiosInterceptors(basicAuthHeader){\r\n\r\n        // let username = 'user'\r\n        // let password = 'password'\r\n\r\n        // let basicAuthHeader = 'Basic '+window.btoa(username +\":\"+password)\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLoggedIn()){\r\n                config.headers.authorization = basicAuthHeader\r\n            }\r\n            return config\r\n        }\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default new AuthenticationService()"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,qBAAqB;EAEvBC,iCAAiC,CAACC,QAAQ,EAACC,QAAQ,EAAC;IAEhD,OAAOJ,KAAK,CAACK,GAAG,CAAC,iCAAiC,EAC9C;MAACC,OAAO,EAAE;QAACC,aAAa,EAAC,IAAI,CAACC,oBAAoB,CAACL,QAAQ,EAACC,QAAQ;MAAE;IAAC,CAAC,CAAC;EACjF;EAEAK,+BAA+B,CAACN,QAAQ,EAACC,QAAQ,EAAC;IAE9C,OAAOJ,KAAK,CAACU,IAAI,CAAC,oCAAoC,EAClD;MAACP,QAAQ;MAACC;IAAQ,CAAC,CAClB;EACT;EAGAI,oBAAoB,CAACL,QAAQ,EAACC,QAAQ,EAAC;IACnC,OAAO,QAAQ,GAACO,MAAM,CAACC,IAAI,CAACT,QAAQ,GAAE,GAAG,GAACC,QAAQ,CAAC;EACvD;EAEAS,wBAAwB,CAACV,QAAQ,EAACC,QAAQ,EAAC;IACvC;IACA;IACA;;IAEAU,cAAc,CAACC,OAAO,CAAC,mBAAmB,EAACZ,QAAQ,CAAC;IACpD,IAAI,CAACa,sBAAsB,CAAC,IAAI,CAACR,oBAAoB,CAACL,QAAQ,EAACC,QAAQ,CAAC,CAAC;EAC7E;EAEAa,MAAM,GAAE;IACJH,cAAc,CAACI,UAAU,CAAC,mBAAmB,CAAC;EAClD;EACAC,cAAc,GAAE;IACZ,IAAIC,IAAI,GAAGN,cAAc,CAACO,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAG,IAAI,EAAC;MAAC,OAAO,KAAK;IAAA,CAAC,MACzB;MAAC,OAAO,IAAI;IAAA;EACpB;EACAE,mBAAmB,GAAE;IACjB,IAAIF,IAAI,GAAGN,cAAc,CAACO,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAG,IAAI,EAAC;MAAC,OAAO,EAAE;IAAA,CAAC,MACtB;MAAC,OAAOA,IAAI;IAAA;EACpB;EACAJ,sBAAsB,CAACO,eAAe,EAAC;IAEnC;IACA;;IAEA;;IAEAvB,KAAK,CAACwB,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;MACR,IAAG,IAAI,CAACR,cAAc,EAAE,EAAC;QACzBQ,MAAM,CAACrB,OAAO,CAACC,aAAa,GAAGgB,eAAe;MAClD;MACA,OAAOI,MAAM;IACjB,CAAC,CACA;EACL;AAGJ;AACA,eAAe,IAAI1B,qBAAqB,EAAE"},"metadata":{},"sourceType":"module"}